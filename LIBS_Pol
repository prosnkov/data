#!/usr/bin/python3
# -*- coding: utf-8 -*-
import os 
import subprocess
import numpy as np
import glob
import scipy.integrate as integrate
from scipy.optimize import curve_fit
import scipy.signal as signal
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
mpl.rc('text', usetex=True)
mpl.rcdefaults()
mpl.font = mpl.font_manager.FontProperties(fname="/usr/share/matplotlib/mpl-data/fonts/ttf/cmb10.ttf")
mpl.rc('figure', max_open_warning = 0)

l=[271.03, 271.39, 293.26, 325.61, 325.86]
nak=['90','sg']
gen=['00','90']
key=[1,2,'1 side','2 side']

def func(x, y0, A, w, x0):
	return y0+2*A/np.pi*w/(4*(x-x0)**2+w**2)

d=os.getcwd() 
os.chdir(d)
f0=open('data','w')
os.chdir('ASC')
imp={}
data={}
gener={}
dt=1
num=0


for j2 in range(len(key)):
	data[j2]={}
	gener[j2]={}
	imp[j2]={}
	for i in range(len(l)):
		data[j2][i]=np.zeros(len(nak))
		gener[j2][i]={}
		imp[j2][i]={}
		for j in range(len(nak)):
			gener[j2][i][j]=np.zeros(len(gen))
			imp[j2][i][j]=np.zeros(len(gen))
			for k in range(len(gen)):
				if any(glob.iglob('*'+str(l[i])+'*'+nak[j]+'*'+gen[k]+'*-*'+str(key[j2])+'.asc'))==True:
					filename=glob.glob('*'+str(l[i])+'*'+nak[j]+'*'+gen[k]+'*-*'+str(key[j2])+'.asc')[0]
					num=num+1
					lines = open(filename).readlines()
					print(str(num)+': '+filename)
					table = np.array([row.split(',') for row in lines])
					x1 = np.float64(np.delete(table,1,1)).ravel()
					y1 = np.float64(np.delete(table,0,1)).ravel()
					rs=0
					peaks=signal.find_peaks(y1, prominence=1000)
					if len(peaks[0])>=1:
						x0_guess=x1[np.argmax(y1)]
						ticks=len(x1)//2-20
						gener[j2][i][j][k]=0
						while gener[j2][i][j][k]<=0 or rs<0.98:
							try:
								print('A='+"{:.2f}".format(gener[j2][i][j][k])+', retry, ticks='+str(ticks)+', rs='+str(rs))
								x=x1[np.argmax(y1)-ticks:np.argmax(y1)+ticks]
								y=y1[np.argmax(y1)-ticks:np.argmax(y1)+ticks]
								A_guess = integrate.simps(y,x)
								y0_guess = min(y)
								x0_guess=x[np.argmax(y)]
								w_guess=2*integrate.simps(y,x)/(np.pi*max(y))
								pguess = [y0_guess, A_guess, w_guess, x0_guess]
								popt, pcov = curve_fit(func, x, y, p0 = pguess)
								y0, A, w, x0 = popt[0], popt[1], popt[2], popt[3]
								gener[j2][i][j][k]=popt[1]
								rs=1-(np.sum((y-func(x,popt[0],popt[1],popt[2],popt[3]))**2)/np.sum((y-np.mean(y))**2))
								ticks=ticks-dt
							except RuntimeError:
								ticks=ticks-dt
								continue
							if ticks<10:
								imp[j2][i][j][k]=0
								print('No generation, max_y='+str(max(y1)))
								break
						if gener[j2][i][j][k]>0 and ticks>=10:							
							imp[j2][i][j][k]=1
							print('A='+"{:.2f}".format(gener[j2][i][j][k])+', ok'+', rs='+str(rs))
						if gener[j2][i][j][k]<=0 or ticks<10:							
							imp[j2][i][j][k]=0
							print('A='+"{:.2f}".format(gener[j2][i][j][k])+', not ok'+', rs='+str(rs))
					else:
						imp[j2][i][j][k]=0
						print('No generation')
					if imp[j2][i][j][k]==1:
						if os.path.exists('fitting')==False:
							os.mkdir('fitting')
						os.chdir('fitting')
						fig = plt.figure()
						plt.scatter(x,y,c='k',s=14,marker='o')
						plt.plot(np.arange(x1[0],x1[-1],0.0001),func(np.arange(x1[0],x1[-1],0.0001), popt[0], popt[1], popt[2], popt[3]),c='r',linewidth=2,label='y0='+"{:.2f}".format(popt[0])+'\n'+'A='+"{:.2f}".format(popt[1])+'\n'+'w='+"{:.6f}".format(popt[2])+'\n'+'x0='+"{:.2f}".format(popt[3])+'\n'+'$R^2$='+"{:.5f}".format(rs))
						plt.tight_layout()
						plt.title(filename, fontsize=14)
						plt.xlim(x0-0.2,x0+0.2)
						plt.xlabel('$\lambda$, nm',fontsize=14)
						plt.ylabel('Intensity',fontsize=14)
						plt.legend(fontsize=14,handlelength=0)
						default_size = fig.get_size_inches() 
						fig.set_size_inches(default_size[0]*1.5, default_size[1]*1.5,forward=True)
						plt.savefig(str(num)+'.jpg')
						os.chdir('..')
					if imp[j2][i][j][k]==0:
						if os.path.exists('fitting')==False:
							os.mkdir('fitting')
						os.chdir('fitting')
						fig = plt.figure()
						plt.scatter(x1,y1,c='k',s=10,marker='o')
						plt.tight_layout()
						plt.title(filename, fontsize=14)
						plt.xlabel('$\lambda$, nm',fontsize=14)
						plt.ylabel('Intensity',fontsize=14)
						default_size = fig.get_size_inches() 
						fig.set_size_inches(default_size[0]*1.5, default_size[1]*1.5,forward=True)
						plt.savefig(str(num)+'.jpg')
						os.chdir('..')

			if imp[j2][i][j][0]==1 and imp[j2][i][j][1]==1:
				data[j2][i][j]=(gener[j2][i][j][1]-gener[j2][i][j][0])/(gener[j2][i][j][1]+gener[j2][i][j][0])
			if imp[j2][i][j][0]==1 and imp[j2][i][j][1]==0:
				data[j2][i][j]=-1
			if imp[j2][i][j][0]==0 and imp[j2][i][j][1]==1:
				data[j2][i][j]=1
			if imp[j2][i][j][0]==0 and imp[j2][i][j][1]==0:
				data[j2][i][j]=-100
		if data[j2][i][0]!=-100:
			str0="{:.2f}".format(data[j2][i][0])
		else:
			str0='No gen'
		if data[j2][i][1]!=-100:
			str1="{:.2f}".format(data[j2][i][1])
		else:
			str1='No gen'
		if any(glob.iglob('*'+str(l[i])+'*'+nak[0]+'*'+gen[0]+'*-*'+str(key[j2])+'.asc'))==True and any(glob.iglob('*'+str(l[i])+'*'+nak[1]+'*'+gen[0]+'*-*'+str(key[j2])+'.asc'))==True:
			f0.write(str(l[i])+'\t'+str(key[j2])+'\t'+str0+'\t'+str1+'\n')
		if any(glob.iglob('*'+str(l[i])+'*'+nak[0]+'*'+gen[0]+'*-*'+str(key[j2])+'.asc'))==False and any(glob.iglob('*'+str(l[i])+'*'+nak[1]+'*'+gen[0]+'*-*'+str(key[j2])+'.asc'))==True:
			f0.write(str(l[i])+'\t'+str(key[j2])+'\t'+'No data'+'\t'+str1+'\n')
		if any(glob.iglob('*'+str(l[i])+'*'+nak[0]+'*'+gen[0]+'*-*'+str(key[j2])+'.asc'))==True and any(glob.iglob('*'+str(l[i])+'*'+nak[1]+'*'+gen[0]+'*-*'+str(key[j2])+'.asc'))==False:
			f0.write(str(l[i])+'\t'+str(key[j2])+'\t'+str0+'\t'+'No data'+'\n')
	#	print(str(i+1)+'00'+' '+"{:.3f}".format(popt[0])+' '+"{:.3f}".format(popt[1])+' '+"{:.3f}".format(popt[2])+' '+"{:.3f}".format(popt[3]))
os.chdir('..')
f0.close()
