#!/usr/bin/python3
# -*- coding: utf-8 -*-
import os 
import subprocess
import numpy as np
import glob
import scipy.integrate as integrate
from scipy.optimize import curve_fit
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
mpl.rc('text', usetex=True)
mpl.rcdefaults()
mpl.font = mpl.font_manager.FontProperties(fname="/usr/share/matplotlib/mpl-data/fonts/ttf/cmb10.ttf")
mpl.rc('figure', max_open_warning = 0)

l=[226.91, 237.31, 237.84, 257.51, 257.54, 266.04, 309.28]
nak=['90','sg']
key=[1,2,3]

def func(x, y0, A, w, x0):
	return y0+2*A/np.pi*w/(4*(x-x0)**2+w**2)

d=os.getcwd() 
os.chdir(d)
f0=open('data1','w')
os.chdir('ASC')
paral=np.zeros(len(l))
poper=np.zeros(len(l))
key1=np.zeros(len(l))
key2=np.zeros(len(l))
data=np.zeros(2)
tiks=520
dt=10
k=0

for j2 in range(len(key)):
	for i in range(len(l)):
		for j in range(len(nak)):
			if any(glob.iglob('*'+str(l[i])+'*'+nak[j]+'*00*-*'+str(key[j2])+'*'))==True: 
				lines = open(glob.glob('*'+str(l[i])+'*'+nak[j]+'*00*-*'+str(key[j2])+'*')[0]).readlines()
				print(glob.glob('*'+str(l[i])+'*'+nak[j]+'*00*-*'+str(key[j2])+'*')[0])
				table = np.array([row.split(',') for row in lines])
				x1 = np.float64(np.delete(table,1,1)).ravel()
				y1 = np.float64(np.delete(table,0,1)).ravel()
				if max(y1)-54000>0:
					try:
						for j3 in range(len(x1)):
							if y1[j3]==max(y1):
								x_new=x1[j3]
						x=x1[j3-tiks:j3+tiks]
						y=y1[j3-tiks:j3+tiks]
						A_guess = integrate.simps(y,x)
						y0_guess = min(y)
						x0_guess = x[0]
						for j1 in range(len(x)):
							if y[j1]==max(y):
								x0_guess=x[j1]
						w_guess=2*integrate.simps(y,x)/(np.pi*max(y))
						pguess = [y0_guess, A_guess, w_guess, x0_guess]
						popt, pcov = curve_fit(func, x, y, p0 = pguess)
						y0, A, w, x0 = popt[0], popt[1], popt[2], popt[3]
						tiks1=tiks
						while popt[1]<0:
							tiks1=tiks1-dt
							x=x1[j3-tiks1:j3+tiks1]
							y=y1[j3-tiks1:j3+tiks1]
							A_guess = integrate.simps(y,x)
							y0_guess = min(y)
							x0_guess = x[0]
							for j1 in range(len(x)):
								if y[j1]==max(y):
									x0_guess=x[j1]
							w_guess=2*integrate.simps(y,x)/(np.pi*max(y))
							pguess = [y0_guess, A_guess, w_guess, x0_guess]
							popt, pcov = curve_fit(func, x, y, p0 = pguess)
							y0, A, w, x0 = popt[0], popt[1], popt[2], popt[3]
						paral[i]=popt[1]
						key1[i]=1
					except RuntimeError:
						try:
							x=x1
							y=y1
							A_guess = integrate.simps(y,x)
							y0_guess = min(y)
							x0_guess = x[0]
							for j1 in range(len(x)):
								if y[j1]==max(y):
									x0_guess=x[j1]
							w_guess=2*integrate.simps(y,x)/(np.pi*max(y))
							pguess = [y0_guess, A_guess, w_guess, x0_guess]
							popt, pcov = curve_fit(func, x, y, p0 = pguess)
							y0, A, w, x0 = popt[0], popt[1], popt[2], popt[3]
							tiks1=550
							while popt[1]<0:
								tiks1=tiks1-dt
								x=x1[j3-tiks1:j3+tiks1]
								y=y1[j3-tiks1:j3+tiks1]
								A_guess = integrate.simps(y,x)
								y0_guess = min(y)
								x0_guess = x[0]
								for j1 in range(len(x)):
									if y[j1]==max(y):
										x0_guess=x[j1]
								w_guess=2*integrate.simps(y,x)/(np.pi*max(y))
								pguess = [y0_guess, A_guess, w_guess, x0_guess]
								popt, pcov = curve_fit(func, x, y, p0 = pguess)
								y0, A, w, x0 = popt[0], popt[1], popt[2], popt[3]
							paral[i]=popt[1]
							if popt[1]>0:							
								key1[i]=1
							if popt[1]<0:							
								key1[i]=0
						except RuntimeError:
							key1[i]=0
				else:
					key1[i]=0
				k=k+1
				print(k)
			if any(glob.iglob('*'+str(l[i])+'*'+nak[j]+'*90*-*'+str(key[j2])+'*'))==True:
				lines = open(glob.glob('*'+str(l[i])+'*'+nak[j]+'*90*-*'+str(key[j2])+'*')[0]).readlines()
				print(glob.glob('*'+str(l[i])+'*'+nak[j]+'*90*-*'+str(key[j2])+'*')[0])
				table = np.array([row.split(',') for row in lines])
				x1 = np.float64(np.delete(table,1,1)).ravel()
				y1 = np.float64(np.delete(table,0,1)).ravel()
				if max(y1)-54000>0:
					try:
						for j3 in range(len(x1)):
							if y1[j3]==max(y1):
								x_new=x1[j3]
						x=x1[j3-tiks:j3+tiks]
						y=y1[j3-tiks:j3+tiks]
						A_guess = integrate.simps(y,x)
						y0_guess = min(y)
						x0_guess = x[0]
						for j1 in range(len(x)):
							if y[j1]==max(y):
								x0_guess=x[j1]
						w_guess=2*integrate.simps(y,x)/(np.pi*max(y))
						pguess = [y0_guess, A_guess, w_guess, x0_guess]
						popt, pcov = curve_fit(func, x, y, p0 = pguess)
						y0, A, w, x0 = popt[0], popt[1], popt[2], popt[3]
						tiks1=tiks
						while popt[1]<0:
							tiks1=tiks1-dt
							x=x1[j3-tiks1:j3+tiks1]
							y=y1[j3-tiks1:j3+tiks1]
							A_guess = integrate.simps(y,x)
							y0_guess = min(y)
							x0_guess = x[0]
							for j1 in range(len(x)):
								if y[j1]==max(y):
									x0_guess=x[j1]
							w_guess=2*integrate.simps(y,x)/(np.pi*max(y))
							pguess = [y0_guess, A_guess, w_guess, x0_guess]
							popt, pcov = curve_fit(func, x, y, p0 = pguess)
							y0, A, w, x0 = popt[0], popt[1], popt[2], popt[3]
						poper[i]=popt[1]
						key2[i]=1
					except RuntimeError:
						try:
							x=x1
							y=y1
							A_guess = integrate.simps(y,x)
							y0_guess = min(y)
							x0_guess = x[0]
							for j1 in range(len(x)):
								if y[j1]==max(y):
									x0_guess=x[j1]
							w_guess=2*integrate.simps(y,x)/(np.pi*max(y))
							pguess = [y0_guess, A_guess, w_guess, x0_guess]
							popt, pcov = curve_fit(func, x, y, p0 = pguess)
							y0, A, w, x0 = popt[0], popt[1], popt[2], popt[3]
							tiks1=550
							while popt[1]<0:
								tiks1=tiks1-dt
								x=x1[j3-tiks1:j3+tiks1]
								y=y1[j3-tiks1:j3+tiks1]
								A_guess = integrate.simps(y,x)
								y0_guess = min(y)
								x0_guess = x[0]
								for j1 in range(len(x)):
									if y[j1]==max(y):
										x0_guess=x[j1]
								w_guess=2*integrate.simps(y,x)/(np.pi*max(y))
								pguess = [y0_guess, A_guess, w_guess, x0_guess]
								popt, pcov = curve_fit(func, x, y, p0 = pguess)
								y0, A, w, x0 = popt[0], popt[1], popt[2], popt[3]
							poper[i]=popt[1]
							if popt[1]>0:							
								key2[i]=1
							if popt[1]<0:							
								key2[i]=0
						except RuntimeError:
							key2[i]=0
				else:
					key2[i]=0
				k=k+1
				print(k)
			if key1[i]==1 and key2[i]==1:
				data[j]=(poper[i]-paral[i])/(poper[i]+paral[i])
			if key1[i]==1 and key2[i]==0:
				data[j]=-1
			if key1[i]==0 and key2[i]==1:
				data[j]=1
			if key1[i]==0 and key2[i]==0:
				data[j]=-100
			if data[0]!=-100:
				str0="{:.2f}".format(data[0])
			else:
				str0='No gen'
			if data[1]!=-100:
				str1="{:.2f}".format(data[1])
			else:
				str1='No gen'
		if any(glob.iglob('*'+str(l[i])+'*'+nak[0]+'*00*-*'+str(key[j2])+'*'))==True and any(glob.iglob('*'+str(l[i])+'*'+nak[1]+'*00*-*'+str(key[j2])+'*'))==True:
			f0.write(str(l[i])+'\t'+str(key[j2])+'\t'+str0+'\t'+str1+'\n')
		if any(glob.iglob('*'+str(l[i])+'*'+nak[0]+'*00*-*'+str(key[j2])+'*'))==False and any(glob.iglob('*'+str(l[i])+'*'+nak[1]+'*00*-*'+str(key[j2])+'*'))==True:
			f0.write(str(l[i])+'\t'+str(key[j2])+'\t'+'No data'+'\t'+str1+'\n')
		if any(glob.iglob('*'+str(l[i])+'*'+nak[0]+'*00*-*'+str(key[j2])+'*'))==True and any(glob.iglob('*'+str(l[i])+'*'+nak[1]+'*00*-*'+str(key[j2])+'*'))==False:
			f0.write(str(l[i])+'\t'+str(key[j2])+'\t'+str0+'\t'+'No data'+'\n')
	#	print(str(i+1)+'00'+' '+"{:.3f}".format(popt[0])+' '+"{:.3f}".format(popt[1])+' '+"{:.3f}".format(popt[2])+' '+"{:.3f}".format(popt[3]))
os.chdir('..')
f0.close()	


#fig = plt.figure()
#fig.set_rasterized(False)
#plt.scatter(pulse,data,c='k',s=20,marker='o')
#plt.plot(pulse,data,c='k',linewidth=2)
#plt.tight_layout()
#plt.legend()
#default_size = fig.get_size_inches() 
#fig.set_size_inches(default_size[0]*1.5, default_size[1]*1.5,forward=True)
#plt.savefig('graph.eps',fmt='eps',rasterized=False)


