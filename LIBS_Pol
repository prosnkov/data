#!/usr/bin/python3
# -*- coding: utf-8 -*-
import os 
import subprocess
import numpy as np
import glob
import scipy.integrate as integrate
from scipy.optimize import curve_fit
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
mpl.rc('text', usetex=True)
mpl.rcdefaults()
mpl.font = mpl.font_manager.FontProperties(fname="/usr/share/matplotlib/mpl-data/fonts/ttf/cmb10.ttf")
mpl.rc('figure', max_open_warning = 0)

l=[226.91, 237.31, 237.84, 257.51, 257.54, 266.04, 309.28]
nak=['90','00']
key=[1,2]

def func(x, y0, A, w, x0):
	return y0+2*A/np.pi*w/(4*(x-x0)**2+w**2)

d=os.getcwd() 
os.chdir(d)
f0=open('data','w')
os.chdir('ASC')
paral=np.zeros(len(l))
poper=np.zeros(len(l))
key1=np.zeros(len(l))
key2=np.zeros(len(l))
data=np.zeros(2)
tiks=550
dt=10
k=0


for j2 in range(len(key)):
	for i in range(len(l)):
		for j in range(len(nak)):
			if any(glob.iglob('*'+str(l[i])+'*'+nak[j]+'*00*-*'+str(key[j2])+'.asc'))==True:
				filename=glob.glob('*'+str(l[i])+'*'+nak[j]+'*00*-*'+str(key[j2])+'.asc')[0]
				k=k+1
				lines = open(glob.glob('*'+str(l[i])+'*'+nak[j]+'*00*-*'+str(key[j2])+'.asc')[0]).readlines()
				print(str(k)+': '+glob.glob('*'+str(l[i])+'*'+nak[j]+'*00*-*'+str(key[j2])+'.asc')[0])
				table = np.array([row.split(',') for row in lines])
				x1 = np.float64(np.delete(table,1,1)).ravel()
				y1 = np.float64(np.delete(table,0,1)).ravel()
				if max(y1)-53500>0:
					try:
						for j1 in range(len(x1)):
							if y1[j1]==max(y1):
								x0_guess=x1[j1]
						tiks1=tiks
						while paral[i]<=0:
							try:
								print('A='+"{:.2f}".format(paral[i])+', retry, ticks='+str(tiks1))
								x=x1[j1-tiks1:j1+tiks1]
								y=y1[j1-tiks1:j1+tiks1]
								A_guess = integrate.simps(y,x)
								y0_guess = min(y)
								x0_guess = x[0]
								for j3 in range(len(x)):
									if y[j3]==max(y):
										x0_guess=x[j3]
								w_guess=2*integrate.simps(y,x)/(np.pi*max(y))
								pguess = [y0_guess, A_guess, w_guess, x0_guess]
								popt, pcov = curve_fit(func, x, y, p0 = pguess)
								y0, A, w, x0 = popt[0], popt[1], popt[2], popt[3]
								paral[i]=popt[1]
								tiks1=tiks1-dt
							except RuntimeError:
								tiks1=tiks1-dt
								continue
							break
							if tiks1<10:
								key1[i]=0
								break
						if paral[i]>0:							
							key1[i]=1
							print('A='+"{:.2f}".format(paral[i])+', ok')
						if paral[i]<0:							
							key1[i]=0
							print('A<0')
					except RuntimeError:
						key1[i]=0
						print('RuntimeError')
				else:
					key1[i]=0
					print('No generation, max_y='+str(max(y1)))
				if key1[i]==1:
					if os.path.exists('fitting')==False:
						os.mkdir('fitting')
					os.chdir('fitting')
					fig = plt.figure()
					plt.scatter(x,y,c='k',s=14,marker='o')
					plt.plot(np.arange(x1[0],x1[-1],0.0001),func(np.arange(x1[0],x1[-1],0.0001), popt[0], popt[1], popt[2], popt[3]),c='r',linewidth=2,label='y0='+"{:.2f}".format(popt[0])+'\n'+'A='+"{:.2f}".format(popt[1])+'\n'+'w='+"{:.6f}".format(popt[2])+'\n'+'x0='+"{:.2f}".format(popt[3]))
					plt.tight_layout()
					plt.title(filename, fontsize=14)
					plt.xlim(x0-0.2,x0+0.2)
					plt.xlabel('$\lambda$, nm',fontsize=14)
					plt.ylabel('Intensity',fontsize=14)
					plt.legend(fontsize=14,handlelength=0)
					default_size = fig.get_size_inches() 
					fig.set_size_inches(default_size[0]*1.5, default_size[1]*1.5,forward=True)
					plt.savefig(str(k)+'.jpg')
					os.chdir('..')
				if key1[i]==0:
					if os.path.exists('fitting')==False:
						os.mkdir('fitting')
					os.chdir('fitting')
					fig = plt.figure()
					plt.scatter(x1,y1,c='k',s=10,marker='o')
					plt.tight_layout()
					plt.title(filename, fontsize=14)
					plt.xlabel('$\lambda$, nm',fontsize=14)
					plt.ylabel('Intensity',fontsize=14)
					default_size = fig.get_size_inches() 
					fig.set_size_inches(default_size[0]*1.5, default_size[1]*1.5,forward=True)
					plt.savefig(str(k)+'.jpg')
					os.chdir('..')
			if any(glob.iglob('*'+str(l[i])+'*'+nak[j]+'*90*-*'+str(key[j2])+'.asc'))==True:
				filename=glob.glob('*'+str(l[i])+'*'+nak[j]+'*90*-*'+str(key[j2])+'.asc')[0]
				k=k+1
				lines = open(glob.glob('*'+str(l[i])+'*'+nak[j]+'*90*-*'+str(key[j2])+'.asc')[0]).readlines()
				print(str(k)+': '+glob.glob('*'+str(l[i])+'*'+nak[j]+'*90*-*'+str(key[j2])+'.asc')[0])
				table = np.array([row.split(',') for row in lines])
				x1 = np.float64(np.delete(table,1,1)).ravel()
				y1 = np.float64(np.delete(table,0,1)).ravel()
				if max(y1)-53500>0:
					try:
						for j1 in range(len(x1)):
							if y1[j1]==max(y1):
								x0_guess=x1[j1]
						tiks1=tiks
						while poper[i]<=0:
							try:
								print('A='+"{:.2f}".format(poper[i])+', retry, ticks='+str(tiks1))
								x=x1[j1-tiks1:j1+tiks1]
								y=y1[j1-tiks1:j1+tiks1]
								A_guess = integrate.simps(y,x)
								y0_guess = min(y)
								x0_guess = x[0]
								for j3 in range(len(x)):
									if y[j3]==max(y):
										x0_guess=x[j3]
								w_guess=2*integrate.simps(y,x)/(np.pi*max(y))
								pguess = [y0_guess, A_guess, w_guess, x0_guess]
								popt, pcov = curve_fit(func, x, y, p0 = pguess)
								y0, A, w, x0 = popt[0], popt[1], popt[2], popt[3]
								tiks1=tiks1-dt
							except RuntimeError:
								tiks1=tiks1-dt
								continue
							break
							if tiks1<10:
								key2[i]=0
								break
						poper[i]=popt[1]
						if poper[i]>0:							
							key2[i]=1
							print('A='+"{:.2f}".format(poper[i])+', ok')
						if poper[i]<0:							
							key2[i]=0
							print('A<0')
					except RuntimeError:
						key2[i]=0
						print('RuntimeError')
				else:
					key2[i]=0
					print('No generation, max_y='+str(max(y1)))
				if key2[i]==1:
					if os.path.exists('fitting')==False:
						os.mkdir('fitting')
					os.chdir('fitting')
					fig = plt.figure()
					plt.scatter(x,y,c='k',s=14,marker='o')
					plt.plot(np.arange(x1[0],x1[-1],0.0001),func(np.arange(x1[0],x1[-1],0.0001), popt[0], popt[1], popt[2], popt[3]),c='r',linewidth=2,label='y0='+"{:.2f}".format(popt[0])+'\n'+'A='+"{:.2f}".format(popt[1])+'\n'+'w='+"{:.6f}".format(popt[2])+'\n'+'x0='+"{:.2f}".format(popt[3]))
					plt.tight_layout()
					plt.title(filename, fontsize=14)
					plt.xlim(x0-0.2,x0+0.2)
					plt.xlabel('$\lambda$, nm',fontsize=14)
					plt.ylabel('Intensity',fontsize=14)
					plt.legend(fontsize=14,handlelength=0)
					default_size = fig.get_size_inches() 
					fig.set_size_inches(default_size[0]*1.5, default_size[1]*1.5,forward=True)
					plt.savefig(str(k)+'.jpg')
					os.chdir('..')
				if key2[i]==0:
					if os.path.exists('fitting')==False:
						os.mkdir('fitting')
					os.chdir('fitting')
					fig = plt.figure()
					plt.scatter(x1,y1,c='k',s=10,marker='o')
					plt.tight_layout()
					plt.title(filename, fontsize=14)
					plt.xlabel('$\lambda$, nm',fontsize=14)
					plt.ylabel('Intensity',fontsize=14)
					default_size = fig.get_size_inches() 
					fig.set_size_inches(default_size[0]*1.5, default_size[1]*1.5,forward=True)
					plt.savefig(str(k)+'.jpg')
					os.chdir('..')
			if key1[i]==1 and key2[i]==1:
				data[j]=(poper[i]-paral[i])/(poper[i]+paral[i])
			if key1[i]==1 and key2[i]==0:
				data[j]=-1
			if key1[i]==0 and key2[i]==1:
				data[j]=1
			if key1[i]==0 and key2[i]==0:
				data[j]=-100
			if data[0]!=-100:
				str0="{:.2f}".format(data[0])
			else:
				str0='No gen'
			if data[1]!=-100:
				str1="{:.2f}".format(data[1])
			else:
				str1='No gen'
		if any(glob.iglob('*'+str(l[i])+'*'+nak[0]+'*00*-*'+str(key[j2])+'.asc'))==True and any(glob.iglob('*'+str(l[i])+'*'+nak[1]+'*00*-*'+str(key[j2])+'.asc'))==True:
			f0.write(str(l[i])+'\t'+str(key[j2])+'\t'+str0+'\t'+str1+'\n')
		if any(glob.iglob('*'+str(l[i])+'*'+nak[0]+'*00*-*'+str(key[j2])+'.asc'))==False and any(glob.iglob('*'+str(l[i])+'*'+nak[1]+'*00*-*'+str(key[j2])+'.asc'))==True:
			f0.write(str(l[i])+'\t'+str(key[j2])+'\t'+'No data'+'\t'+str1+'\n')
		if any(glob.iglob('*'+str(l[i])+'*'+nak[0]+'*00*-*'+str(key[j2])+'.asc'))==True and any(glob.iglob('*'+str(l[i])+'*'+nak[1]+'*00*-*'+str(key[j2])+'.asc'))==False:
			f0.write(str(l[i])+'\t'+str(key[j2])+'\t'+str0+'\t'+'No data'+'\n')
	#	print(str(i+1)+'00'+' '+"{:.3f}".format(popt[0])+' '+"{:.3f}".format(popt[1])+' '+"{:.3f}".format(popt[2])+' '+"{:.3f}".format(popt[3]))
os.chdir('..')
f0.close()
