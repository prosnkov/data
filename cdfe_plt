#!/usr/bin/python3
# -*- coding: utf-8 -*-
#Program for taking data from CDFE-, NNDC-EXFOR and NNDC-ENDF databases
#Place an actual link (like http://cdfe.sinp.msu.ru/cgi-bin/exf2htm?LINK=M0164002) into the edit line
#Version: 0.5.2
#Upd: 29.04.2020

from __future__ import unicode_literals
import os
import numpy as np
import requests
import re
import math
from collections import namedtuple
import sys
from PyQt5.QtWidgets import QApplication, QLabel, QMainWindow, QMenu, QGridLayout, QSizePolicy, QWidget, QPushButton, QLineEdit, QComboBox
from PyQt5.QtCore import QCoreApplication
from PyQt5.QtGui import QIcon
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import matplotlib as mpl
mpl.rc('text', usetex=True)
mpl.rcdefaults()
mpl.font = mpl.font_manager.FontProperties(fname="/usr/share/matplotlib/mpl-data/fonts/ttf/cmb10.ttf")
mpl.rc('figure', max_open_warning = 0)

def is_float(val):
	try:
		float(val)
	except ValueError:
		return False
	else:
		return True

def exfor(link):
	if "cdfe" in link:
		if link.endswith('&SOURCE=ON') == False:
			link=link+'&SOURCE=ON'
		if link.startswith('http://') == False:
			link='http://'+link
	if "nndc" in link:
		if link.startswith('https://') == False:
			link='https://'+link
	r = requests.get(link)
	lines = r.text.split('\n')
	i=0
	key=0
	col1=['#E,eV','MILLI-EV','EV','KEV','MEV','GEV','ADEG','NO-DIM']
	col2=[' Sig,b',' B',' MB',' MICRO-B',' B/SR',' MB/SR',' MU-B/SR',' NB/SR',' ARB-UNITS',' NO-DIM',' PC/FIS',' PC/INC']
	col3=[' B',' MB',' MICRO-B',' B/SR',' MB/SR',' MU-B/SR',' NB/SR',' ARB-UNITS',' NO-DIM',' PC/FIS',' PC/INC','']
	col4=[' NO-DIM',' MILLI-EV',' EV',' KEV',' MEV',' GEV',' ADEG','']
	for a in range(len(col1)):
		i=0
		for b in range(len(col2)):
			i=0
			for c in range(len(col3)):
				i=0
				for d in range(len(col4)):
					i=0
					for line in lines:
						if " ".join(line.split()).startswith(f'{col1[a]}{col2[b]}{col3[c]}{col4[d]}') == True or \
						" ".join(line.split()).startswith(f'{col1[a]}{col4[d]}{col2[b]}{col3[c]}') == True:
							if a==0 and b==0:key=3
							elif col3[c]==' NO-DIM' and col2[b]!=col3[c]:key=1.2
							elif d==0:key=1.1
							elif d in [1,2,3,4,5,6]:key=2
							else:key=1
							break
						i=i+1
					if key!=0: break
				if key!=0: break
			if key!=0: break
		if key!=0: break
	if key==1 or key==1.1 or key==1.2:
		if "cdfe" in link:arr = r.text.split('\n')[i+1:-3]
		if "nndc" in link:arr = r.text.split('\n')[i+1:-4]
		arr = [re.sub(r'\s+', r' ', elem.lstrip().rstrip()).split() for elem in arr]
		table = []
		if key==1:
			for elem in arr:
				if "cdfe" in link:
					if len(elem)%2 != 0:
						table.append(elem[:2] + [0])
					if len(elem)%2 == 0:
						table.append(elem[:3])
				if "nndc" in link:
					if len(elem)<3:
						table.append(elem[:2] + [0])
					if len(elem)>=3:
						table.append(elem[:3])
		if key==1.1:
			for elem in arr:
				if "cdfe" in link:
					if len(elem) == 4:
						table.append(elem[:2] + [0])
					if len(elem) >= 5:
						table.append(elem[:3])
			key=1
		if key==1.2:
			for elem in arr:
					table.append(elem[:2] + [0])
			key=1
		x = np.float64(np.delete(table,[1,2],1)).ravel()
		y = np.float64(np.delete(table,[0,2],1)).ravel()
		yerr=np.float64(np.delete(table,[0,1],1)).ravel()
		result = namedtuple('arrays', ['x','y','yerr','key'])
		return result(x,y,yerr,key)
	if key==2:
		if "cdfe" in link:arr = r.text.split('\n')[i+1:-3]
		if "nndc" in link:arr = r.text.split('\n')[i+1:-4]
		arr = [re.sub(r'\s+', r' ', elem.lstrip().rstrip()).split() for elem in arr]
		table = []
		for elem in arr:
			if "cdfe" in link:
				if len(elem) == 3:
					table.append(elem[:1] + [0] + elem[1:2] + [0])
				if len(elem) == 4:
					table.append(elem[:3] + [0])	
				if len(elem) == 5:
					if is_float(elem[2]) == False:
						table.append(elem[:1] + [0] + elem[1:2] + [0])
					if is_float(elem[2]) == True:
						if is_float(elem[3]) == False:
							table.append(elem[:3] + [0])
						if is_float(elem[3]) == True:
							table.append(elem[:4])
				if len(elem) == 6:
					table.append(elem[:3] + [0])				
				if len(elem) >= 7:
					table.append(elem[:4])
			if "nndc" in link:
				if len(elem) < 3:
					table.append(elem[:1] + [0] + elem[1:2] + [0])
				if len(elem) == 3:
					table.append(elem[:3] + [0])				
				if len(elem) >= 4:
					table.append(elem[:4])				
		x = np.float64(np.delete(table,[1,2,3],1)).ravel()
		xerr = np.float64(np.delete(table,[0,2,3],1)).ravel()
		y = np.float64(np.delete(table,[0,1,3],1)).ravel()
		yerr = np.float64(np.delete(table,[0,1,2],1)).ravel()
		result = namedtuple('arrays', ['x','xerr','y','yerr','key'])
		return result(x,xerr,y,yerr,key)
	if key==3:
		if "GetTabData" in link:arr = r.text.split('\n')[i+1:-2]
		if "GetTabSect" in link:arr = r.text.split('\n')[i+1:-26]
		arr = [re.sub(r'\s+', r' ', elem.lstrip().rstrip()).split() for elem in arr]
		table = []
		for elem in arr:
			table.append(elem[:2])
		x = np.multiply(np.float64(np.delete(table,1,1)).ravel(),math.pow(10,-6))
		y = np.multiply(np.float64(np.delete(table,0,1)).ravel(),math.pow(10,3))
		result = namedtuple('arrays', ['x','y','key'])
		return result(x,y,key)

class SaveFig_Window(QMainWindow):
	def __init__(self,parent=None):
		super(SaveFig_Window,self).__init__(parent)

		self.setWindowTitle('Сохранить рисунок')
		self.name_txt=QLabel("Имя файла"); self.name = QLineEdit(self); self.name.setText("")
		self.tlt_txt=QLabel("Заголовок"); self.tlt = QLineEdit(self); self.tlt.setText("")
		self.label_txt=QLabel("Реакция"); self.label = QLineEdit(self);	self.label.setText("")
		self.xlab_txt=QLabel("Ось X"); self.xlab = QLineEdit(self); self.xlab.setText("E, МэВ")
		self.min_x_txt=QLabel("Min X"); self.min_x = QLineEdit(self); self.min_x.setText("")
		self.max_x_txt=QLabel("Max X"); self.max_x = QLineEdit(self); self.max_x.setText("")
		self.min_y_txt=QLabel("Min Y"); self.min_y = QLineEdit(self); self.min_y.setText("")
		self.max_y_txt=QLabel("Max Y"); self.max_y = QLineEdit(self); self.max_y.setText("")
		self.ylab_txt=QLabel("Ось Y"); self.ylab = QLineEdit(self); self.ylab.setText("$\sigma$, мб")
		self.tlt_txt.setToolTip('Поддерживает TeX'); self.label_txt.setToolTip('Поддерживает TeX')
		self.xlab_txt.setToolTip('Поддерживает TeX'); self.ylab_txt.setToolTip('Поддерживает TeX')
		self.min_x_txt.setToolTip('Оставьте поле пустым для автоматической настройки'); self.max_x_txt.setToolTip('Оставьте поле пустым для автоматической настройки');
		self.min_y_txt.setToolTip('Оставьте поле пустым для автоматической настройки'); self.max_y_txt.setToolTip('Оставьте поле пустым для автоматической настройки');
		self.col_txt=QLabel("Цвет"); self.col=QComboBox()
		self.col.addItem('Чёрный'); self.col.addItem('Красный'); self.col.addItem('Зелёный'); self.col.addItem('Синий')
		self.ty_txt=QLabel("Тип"); self.ty=QComboBox()
		self.ty.addItem('Точки'); self.ty.addItem('Линии')
		self.fm_txt=QLabel("Формат"); self.fm=QComboBox()
		self.fm.addItem('eps'); self.fm.addItem('jpeg')
		self.pl_txt=QLabel("Место"); self.pl = QLineEdit(self); self.pl.setText(str(os.getcwd()))
		Yes = QPushButton('Сохранить', self); Yes.clicked.connect(self.savefig)
		No = QPushButton('Отмена', self); No.clicked.connect(lambda:self.close())

		layout = QGridLayout(self)
		layout.addWidget(self.name_txt,0,0); layout.addWidget(self.name,0,1)
		layout.addWidget(self.tlt_txt,0,2); layout.addWidget(self.tlt,0,3)
		layout.addWidget(self.label_txt,0,4); layout.addWidget(self.label,0,5)
		layout.addWidget(self.xlab_txt,1,0); layout.addWidget(self.xlab,1,1)
		layout.addWidget(self.min_x_txt,1,2); layout.addWidget(self.min_x,1,3)
		layout.addWidget(self.max_x_txt,1,4); layout.addWidget(self.max_x,1,5)
		layout.addWidget(self.ylab_txt,2,0); layout.addWidget(self.ylab,2,1)
		layout.addWidget(self.min_y_txt,2,2); layout.addWidget(self.min_y,2,3)
		layout.addWidget(self.max_y_txt,2,4); layout.addWidget(self.max_y,2,5)
		layout.addWidget(self.col_txt,3,0); layout.addWidget(self.col,3,1)
		layout.addWidget(self.ty_txt,3,2); layout.addWidget(self.ty,3,3)
		layout.addWidget(self.fm_txt,3,4); layout.addWidget(self.fm,3,5)
		layout.addWidget(self.pl_txt,4,0); layout.addWidget(self.pl,4,1,1,5)
		layout.addWidget(Yes,5,0,1,3); layout.addWidget(No,5,3,1,3)
		Save_UI = QWidget()
		Save_UI.setLayout(layout)
		self.setCentralWidget(Save_UI)

	def savefig(self):
		global link
		fig = plt.figure()
		if self.col.currentIndex()==0:	clr='k'
		if self.col.currentIndex()==1:	clr='r'
		if self.col.currentIndex()==2:	clr='g'
		if self.col.currentIndex()==3:	clr='b'
		if self.ty.currentIndex()==0:
			x=exfor(str(link)).x
			y=exfor(str(link)).y
			plt.scatter(x, y,c=clr,s=20,marker='o',label=str(self.label.text()))
			if exfor(str(link)).key==1:
				yerr=exfor(str(link)).yerr
				plt.errorbar(x, y, yerr=yerr, ls='none',c=clr,elinewidth=1,capsize=2)
			if exfor(str(link)).key==2:
				yerr=exfor(str(link)).yerr
				xerr=exfor(str(link)).xerr
				plt.errorbar(x, y, yerr=yerr, xerr=xerr, ls='none',c=clr,elinewidth=1,capsize=2)
		if self.ty.currentIndex()==1:
			x=exfor(str(link)).x
			y=exfor(str(link)).y
			plt.plot(x,y,c=clr,linewidth=2,label=str(self.label.text()))
		plt.tight_layout()
		if self.label.text()!='': plt.legend(fontsize=14)
		if self.tlt.text()!='': plt.title(self.tlt.text(),fontsize=14)
		if self.xlab.text()!='': plt.xlabel(self.xlab.text(),fontsize=14)
		if self.ylab.text()!='': plt.ylabel(self.ylab.text(),fontsize=14)
		x_min=float(self.min_x.text()) if self.min_x.text()!='' else None
		x_max=float(self.max_x.text()) if self.max_x.text()!='' else None
		y_min=float(self.min_y.text()) if self.min_y.text()!='' else None
		y_max=float(self.max_y.text()) if self.max_y.text()!='' else None
		plt.xlim(x_min,x_max), plt.ylim(y_min,y_max)
		default_size = fig.get_size_inches() 
		fig.set_size_inches(default_size[0]*2, default_size[1]*2,forward=True)
		os.chdir(str(self.pl.text()))
		if self.fm.currentIndex()==0:
			fig.set_rasterized(False)
			plt.savefig(str(self.name.text())+'.eps',fmt='eps',rasterized=False)
		if self.fm.currentIndex()==1:
			plt.savefig(str(self.name.text())+'.jpg',fmt='jpg')
		self.close()


class SaveTab_Window(QMainWindow):
	def __init__(self,parent=None):
		super(SaveTab_Window,self).__init__(parent)
		self.setWindowTitle('Сохранить таблицу')
		self.name_txt=QLabel("Название файла"); self.name = QLineEdit(self); self.name.setText("")
		self.pl_txt=QLabel("Место"); self.pl = QLineEdit(self); self.pl.setText(str(os.getcwd()))
		Yes = QPushButton('Сохранить', self); Yes.clicked.connect(self.savetab)
		No = QPushButton('Отмена', self); No.clicked.connect(lambda:self.close())
		layout = QGridLayout(self)
		layout.addWidget(self.name_txt,0,0); layout.addWidget(self.name,0,1)
		layout.addWidget(self.pl_txt,1,0); layout.addWidget(self.pl,1,1)
		layout.addWidget(Yes,2,0); layout.addWidget(No,2,1)
		Save_UI = QWidget()
		Save_UI.setLayout(layout)
		self.setCentralWidget(Save_UI)

	def savetab(self):
		global link
		os.chdir(str(self.pl.text()))
		x=exfor(str(link)).x
		y=exfor(str(link)).y
		f0 = open(str(self.name.text()),'w')
		if exfor(str(link)).key == 1:
			yerr=exfor(str(link)).yerr
			for i in range(len(x)):
				f0.write(str(x[i]) + '\t' + str(y[i]) + '\t' + str(yerr[i]) + '\n')
			f0.close()
		if exfor(str(link)).key == 2:
			yerr=exfor(str(link)).yerr
			xerr=exfor(str(link)).xerr
			for i in range(len(exfor(str(link)).x)):
				f0.write(str(x[i]) + '\t' + str(xerr[i]) + '\t' + str(y[i]) + '\t' + str(yerr[i]) + '\n')
			f0.close()
		if exfor(str(link)).key == 3:
			for i in range(len(exfor(str(link)).x)):
				f0.write(str(x[i]) + '\t' + str(y[i]) + '\n')
			f0.close()
		self.close()


class EXFOR_Main_Window(QMainWindow):
	def __init__(self,parent=None):
		super(EXFOR_Main_Window,self).__init__(parent)
		self.initUI1()

	def plot(self):
		self.figure.clear()
		ax = self.figure.add_subplot(111)
		global link
		link = self.textbox.text()
#		print(str(exfor(str(link)).key))
		x=exfor(str(link)).x
		y=exfor(str(link)).y
		ax.scatter(x, y,c='k',s=20,marker='o')
		if exfor(str(link)).key==1:
			yerr=exfor(str(link)).yerr
			ax.errorbar(x, y, yerr=yerr, ls='none',c='k',elinewidth=1,capsize=2)
		if exfor(str(link)).key==2:
			yerr=exfor(str(link)).yerr
			xerr=exfor(str(link)).xerr
			ax.errorbar(x, y, yerr=yerr, xerr=xerr, ls='none',c='k',elinewidth=1,capsize=2)
		self.canvas.draw()
#		for i in range(len(cdfe(str(link)).x)):
#			self.text.setText(self.text.text()+str(cdfe(str(link)).x[i]) + '\t' + str(cdfe(str(link)).y[i]) + '\t' + str(cdfe(str(link)).err[i]) + '\n')

	def savetab_button_clk(self):
		self.dialogtab.show()
		global link
		link = self.textbox.text()

	def savefig_button_clk(self):
		self.dialogfig.show()
		global link
		link = self.textbox.text()

	def initUI1(self):
		self.setWindowTitle('EXFOR plotter')
		self.setGeometry(10, 10, 540, 480)
		self.setWindowIcon(QIcon('cdfe_logo.gif'))

		self.textbox = QLineEdit(self)
		self.textbox.setText("")

		self.figure = Figure(figsize=(6.4, 5.4), dpi=100)
		self.canvas = FigureCanvasQTAgg(self.figure)
		self.canvas.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
		self.canvas.updateGeometry()

#		self.text = QLabel()

		plot_button = QPushButton('Нарисовать сечение', self); plot_button.clicked.connect(self.plot)
		save_table = QPushButton('Сохранить таблицу', self); self.dialogtab = SaveTab_Window(self); save_table.clicked.connect(self.savetab_button_clk)
		save_figure = QPushButton('Сохранить рисунок', self); self.dialogfig = SaveFig_Window(self); save_figure.clicked.connect(self.savefig_button_clk)
		bQuit = QPushButton('Выход', self); bQuit.clicked.connect(QCoreApplication.instance().quit)

		layout = QGridLayout(self)
		layout.addWidget(self.canvas,0,0,1,0)
#		layout.addWidget(self.text,0,1)
		layout.addWidget(self.textbox,1,0,1,0)
		layout.addWidget(plot_button,2,0,1,0)
		layout.addWidget(save_table,3,0); layout.addWidget(save_figure,3,1)
		layout.addWidget(bQuit,4,0,1,0)
		Main_UI = QWidget()
		Main_UI.setLayout(layout)
		self.setCentralWidget(Main_UI)

app = QApplication(sys.argv)
ex = EXFOR_Main_Window()
ex.show()
sys.exit(app.exec_())
